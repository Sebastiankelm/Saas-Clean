#!/usr/bin/env bash
# Rotates application secrets and documents the rotation schedule.
#
# This script is designed to be run every 90 days. It reads key/value pairs from
# an environment file (e.g. .env.production), updates the corresponding GitHub
# Actions secrets, and creates a reminder issue for the next rotation.
#
# Requirements:
#   - GitHub CLI (https://cli.github.com/) authenticated with the repository.
#   - GNU date (available by default on Linux). macOS users can install coreutils
#     to obtain `gdate` or update the DATE_CMD variable below.
#
# Usage:
#   scripts/rotate-secrets.sh <environment> <env-file> [--repo owner/name] [--no-reminder]
#
# Example:
#   scripts/rotate-secrets.sh production .env.production --repo my-org/saas-clean
#
# The script will:
#   1. Push all secrets from the provided env file to GitHub Actions.
#   2. Update the corresponding GitHub Actions environment (if not "repository").
#   3. Create a GitHub Issue reminding the team to rotate secrets again in 90 days.

set -euo pipefail

DATE_CMD="date"
if ! command -v "${DATE_CMD}" >/dev/null 2>&1; then
  if command -v gdate >/dev/null 2>&1; then
    DATE_CMD="gdate"
  else
    echo "[!] GNU date (or gdate) is required to compute reminder dates." >&2
    exit 1
  fi
fi

usage() {
  sed -n '1,70p' "$0"
}

if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then
  usage
  exit 0
fi

if [[ $# -lt 2 ]]; then
  echo "Usage: $0 <environment> <env-file> [--repo owner/name] [--no-reminder]" >&2
  exit 1
fi

environment=$1
shift
env_file=$1
shift

if [[ ! -f "$env_file" ]]; then
  echo "[!] Cannot find env file: $env_file" >&2
  exit 1
fi

if ! command -v gh >/dev/null 2>&1; then
  echo "[!] GitHub CLI (gh) is required. Install it from https://cli.github.com/" >&2
  exit 1
fi

repo=${GITHUB_REPOSITORY:-}
create_reminder=true

while [[ $# -gt 0 ]]; do
  case $1 in
    --repo)
      repo=$2
      shift 2
      ;;
    --no-reminder)
      create_reminder=false
      shift
      ;;
    *)
      echo "[!] Unknown option: $1" >&2
      exit 1
      ;;
  esac
done

if [[ -z "$repo" ]]; then
  repo=$(gh repo view --json nameWithOwner -q '.nameWithOwner') || {
    echo "[!] Unable to infer repository. Pass --repo owner/name." >&2
    exit 1
  }
fi

echo "[+] Rotating secrets for '$environment' using $env_file in repository $repo"

declare -A secrets
while IFS='=' read -r key value; do
  key=${key%% *}
  key=${key## }
  value=${value%$'\r'}
  if [[ -z "$key" || $key == \#* ]]; then
    continue
  fi
  secrets[$key]=$value
done <"$env_file"

if [[ ${#secrets[@]} -eq 0 ]]; then
  echo "[!] No secrets found in $env_file" >&2
  exit 1
fi

for key in "${!secrets[@]}"; do
  value=${secrets[$key]}
  if [[ -z "$value" ]]; then
    echo "[!] Skipping empty value for $key" >&2
    continue
  fi
  if [[ "$environment" == "repository" || "$environment" == "repo" ]]; then
    gh secret set "$key" --repo "$repo" --body "$value"
  else
    gh secret set "$key" --repo "$repo" --env "$environment" --body "$value"
  fi
  echo "    • Updated $key"
  unset value
  secrets[$key]=''
done

current_rotation=$(${DATE_CMD} -u +%Y-%m-%d 2>/dev/null || true)
next_rotation=$(${DATE_CMD} -u -d "+90 days" +%Y-%m-%d 2>/dev/null || true)
if [[ -z "$next_rotation" ]]; then
  echo "[!] Failed to compute next rotation date. Reminder will not be created." >&2
  create_reminder=false
fi

if $create_reminder; then
  reminder_title="Rotate $environment secrets before $next_rotation"
  reminder_body=$(cat <<REMINDER
This is an automated reminder that the secrets for the **$environment** environment were rotated on $current_rotation.

Please repeat the rotation process before **$next_rotation**.

> Generated by `scripts/rotate-secrets.sh`.
REMINDER
)
  if gh issue create --repo "$repo" --title "$reminder_title" --body "$reminder_body" >/dev/null; then
    echo "[+] Created reminder issue for next rotation ($next_rotation)."
  else
    echo "[!] Failed to create reminder issue. Please create one manually." >&2
  fi
fi

echo "[✓] Secret rotation complete. Schedule the next run for $next_rotation."
