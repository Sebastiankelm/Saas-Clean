/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/data/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch dataset overview counts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Overview counts for core datasets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            summary: {
                                collections: number;
                                entries: number;
                                dashboards: number;
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute a filtered query against a schema-qualified table */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DataQueryRequest"];
                };
            };
            responses: {
                /** @description Query results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                [key: string]: unknown;
                            }[];
                            count?: number | null;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List CMS collections */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description CMS collections */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collections: components["schemas"]["Collection"][];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /** Create a CMS collection */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCollectionRequest"];
                };
            };
            responses: {
                /** @description Created collection */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collection: components["schemas"]["Collection"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a CMS collection */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCollectionRequest"];
                };
            };
            responses: {
                /** @description Updated collection */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collection: components["schemas"]["Collection"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        trace?: never;
    };
    "/dashboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List dashboards */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dashboard list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            dashboards: components["schemas"]["Dashboard"][];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /** Create a dashboard */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateDashboardRequest"];
                };
            };
            responses: {
                /** @description Created dashboard */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            dashboard: components["schemas"]["Dashboard"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a dashboard */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateDashboardRequest"];
                };
            };
            responses: {
                /** @description Updated dashboard */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            dashboard: components["schemas"]["Dashboard"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        trace?: never;
    };
    "/auth-admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List admin console users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Admin users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            users: components["schemas"]["AdminUser"][];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /** Create an admin console user record */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateAdminUserRequest"];
                };
            };
            responses: {
                /** @description Created admin user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user: components["schemas"]["AdminUser"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-admin/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update an admin console user */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAdminUserRequest"];
                };
            };
            responses: {
                /** @description Updated admin user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user: components["schemas"]["AdminUser"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        trace?: never;
    };
    "/storage/objects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List storage objects within a bucket path */
        get: {
            parameters: {
                query: {
                    bucket: string;
                    path?: string;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Storage objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            objects: components["schemas"]["StorageObject"][];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /** Upload or replace a storage object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UploadStorageObjectRequest"];
                };
            };
            responses: {
                /** @description Uploaded object metadata */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            object: components["schemas"]["UploadedStorageObject"];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        /** Remove storage objects */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RemoveStorageObjectRequest"];
                };
            };
            responses: {
                /** @description Removed objects summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            removed: {
                                [key: string]: unknown;
                            }[];
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List audit log entries */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audit log entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            entries: components["schemas"]["AuditLogEntry"][];
                            count?: number | null;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit/logs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a specific audit log entry */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audit entry */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            entry: components["schemas"]["AuditLogEntry"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            error: string;
        };
        DataQueryRequest: {
            /**
             * @default public
             * @enum {string}
             */
            schema: "public" | "admin" | "cms" | "dashboards";
            table: string;
            select?: string[];
            filters?: {
                [key: string]: unknown;
            };
            /** @default 50 */
            limit: number;
        };
        Collection: {
            /** Format: uuid */
            id: string;
            slug: string;
            name: string;
            description?: string | null;
            icon?: string | null;
            is_singleton: boolean;
            default_locale: string;
            created_by?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CreateCollectionRequest: {
            slug: string;
            name: string;
            description?: string;
            icon?: string;
            /** @default false */
            isSingleton: boolean;
            /** @default en */
            defaultLocale: string;
        };
        UpdateCollectionRequest: {
            slug?: string;
            name?: string;
            description?: string;
            icon?: string;
            isSingleton?: boolean;
            defaultLocale?: string;
        };
        Dashboard: {
            /** Format: uuid */
            id: string;
            slug: string;
            title: string;
            description?: string | null;
            /** @enum {string} */
            visibility: "private" | "team" | "public";
            team_id?: number | null;
            metadata: {
                [key: string]: unknown;
            };
            owner_user_id?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CreateDashboardRequest: {
            slug: string;
            title: string;
            description?: string;
            /**
             * @default private
             * @enum {string}
             */
            visibility: "private" | "team" | "public";
            teamId?: number;
            metadata?: {
                [key: string]: unknown;
            };
        };
        UpdateDashboardRequest: {
            slug?: string;
            title?: string;
            description?: string;
            /** @enum {string} */
            visibility?: "private" | "team" | "public";
            teamId?: number;
            metadata?: {
                [key: string]: unknown;
            };
        };
        AdminUser: {
            /** Format: uuid */
            id: string;
            auth_user_id?: string | null;
            app_user_id?: number | null;
            display_name?: string | null;
            avatar_url?: string | null;
            locale: string;
            timezone: string;
            is_active: boolean;
            preferences: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            last_sign_in_at?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CreateAdminUserRequest: {
            authUserId?: string;
            appUserId?: number;
            displayName: string;
            avatarUrl?: string;
            /** @default en */
            locale: string;
            /** @default UTC */
            timezone: string;
            /** @default true */
            isActive: boolean;
            preferences?: {
                [key: string]: unknown;
            };
        };
        UpdateAdminUserRequest: {
            authUserId?: string;
            appUserId?: number;
            displayName?: string;
            avatarUrl?: string;
            locale?: string;
            timezone?: string;
            isActive?: boolean;
            preferences?: {
                [key: string]: unknown;
            };
        };
        StorageObject: {
            name: string;
            id?: string | null;
            updated_at?: string | null;
            created_at?: string | null;
            last_accessed_at?: string | null;
            metadata?: {
                [key: string]: unknown;
            };
            buckets_id?: string | null;
        };
        UploadStorageObjectRequest: {
            bucket: string;
            path: string;
            /** @default application/octet-stream */
            contentType: string;
            /** @description Base64 encoded payload or data URI */
            data: string;
            upsert?: boolean;
        };
        UploadedStorageObject: {
            id?: string | null;
            path: string;
            fullPath: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
        RemoveStorageObjectRequest: {
            bucket: string;
            paths: string[];
        };
        AuditLogEntry: {
            id: number;
            actor_user_id?: string | null;
            event_type: string;
            resource_type: string;
            resource_identifier?: string | null;
            previous_values?: {
                [key: string]: unknown;
            } | null;
            new_values?: {
                [key: string]: unknown;
            } | null;
            metadata?: {
                [key: string]: unknown;
            } | null;
            ip_address?: string | null;
            /** Format: date-time */
            occurred_at: string;
        };
    };
    responses: {
        /** @description Authentication is required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Caller lacks required permissions or MFA/Captcha validation */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Invalid payload or parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
