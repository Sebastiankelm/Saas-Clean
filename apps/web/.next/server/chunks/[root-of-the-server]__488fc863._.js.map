{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sebak/OneDrive/Pulpit/saas-starter-main/apps/web/config/env.ts"],"sourcesContent":["import { createEnv } from '@t3-oss/env-nextjs';\r\nimport { z } from 'zod';\r\n\r\nconst supportedLocales = z\r\n  .string()\r\n  .min(1, 'At least one locale is required')\r\n  .transform((value) =>\r\n    value\r\n      .split(',')\r\n      .map((locale) => locale.trim())\r\n      .filter(Boolean)\r\n  )\r\n  .pipe(z.array(z.string().min(2)).min(1));\r\n\r\nexport const env = createEnv({\r\n  server: {\r\n    SUPABASE_URL: z.string().url(),\r\n    SUPABASE_ANON_KEY: z.string().min(1),\r\n    SUPABASE_SERVICE_ROLE_KEY: z.string().min(1),\r\n    AUTH_SECRET: z.string().min(32),\r\n    STRIPE_SECRET_KEY: z.string().min(1),\r\n    STRIPE_WEBHOOK_SECRET: z.string().min(1),\r\n    FRONTEND_URL: z.string().url(),\r\n    BASE_URL: z.string().url().optional(),\r\n    CONTACT_EMAIL: z.string().email(),\r\n    I18N_DEFAULT_LOCALE: z.string().min(2),\r\n    I18N_SUPPORTED_LOCALES: supportedLocales,\r\n    POSTGRES_URL: z.string().url().optional(),\r\n    POSTGRES_SSL: z.enum(['true', 'false']).optional(),\r\n  },\r\n  client: {\r\n    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string().min(1),\r\n  },\r\n  runtimeEnv: {\r\n    SUPABASE_URL: process.env.SUPABASE_URL,\r\n    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY,\r\n    SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n    AUTH_SECRET: process.env.AUTH_SECRET,\r\n    STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,\r\n    STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,\r\n    FRONTEND_URL: process.env.FRONTEND_URL,\r\n    BASE_URL: process.env.BASE_URL,\r\n    CONTACT_EMAIL: process.env.CONTACT_EMAIL,\r\n    I18N_DEFAULT_LOCALE: process.env.I18N_DEFAULT_LOCALE,\r\n    I18N_SUPPORTED_LOCALES: process.env.I18N_SUPPORTED_LOCALES,\r\n    POSTGRES_URL: process.env.POSTGRES_URL,\r\n    POSTGRES_SSL: process.env.POSTGRES_SSL,\r\n    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,\r\n  },\r\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\r\n  emptyStringAsUndefined: true,\r\n});\r\n\r\nexport const baseUrl = env.BASE_URL ?? env.FRONTEND_URL;\r\nexport const supportedLocaleList = env.I18N_SUPPORTED_LOCALES;\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,mBAAmB,qLAAA,CAAA,IAAC,CACvB,MAAM,GACN,GAAG,CAAC,GAAG,mCACP,SAAS,CAAC,CAAC,QACV,MACG,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,SAAW,OAAO,IAAI,IAC3B,MAAM,CAAC,UAEX,IAAI,CAAC,qLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;AAEhC,MAAM,MAAM,CAAA,GAAA,qRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,cAAc,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,mBAAmB,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAClC,2BAA2B,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC1C,aAAa,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC5B,mBAAmB,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAClC,uBAAuB,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,cAAc,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;QACnC,eAAe,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;QAC/B,qBAAqB,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACpC,wBAAwB;QACxB,cAAc,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;QACvC,cAAc,qLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAQ;SAAQ,EAAE,QAAQ;IAClD;IACA,QAAQ;QACN,oCAAoC,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACrD;IACA,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;QAChD,2BAA2B,QAAQ,GAAG,CAAC,yBAAyB;QAChE,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;QAChD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,UAAU,QAAQ,GAAG,CAAC,QAAQ;QAC9B,eAAe,QAAQ,GAAG,CAAC,aAAa;QACxC,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;QACpD,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB;QAC1D,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,oCAAoC,QAAQ,GAAG,CAAC,kCAAkC;IACpF;IACA,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD,wBAAwB;AAC1B;AAEO,MAAM,UAAU,IAAI,QAAQ,IAAI,IAAI,YAAY;AAChD,MAAM,sBAAsB,IAAI,sBAAsB","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sebak/OneDrive/Pulpit/saas-starter-main/apps/web/lib/db/client.ts"],"sourcesContent":["import { createClient, type SupabaseClient } from '@supabase/supabase-js';\r\nimport type { Database } from '../../../../supabase/types';\r\nimport { env } from '@/config/env';\r\n\r\nconst supabaseUrl = env.SUPABASE_URL;\r\nconst supabaseAnonKey = env.SUPABASE_ANON_KEY;\r\nconst supabaseServiceRoleKey = env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nconst globalOptions = {\r\n  auth: {\r\n    persistSession: false,\r\n    autoRefreshToken: false,\r\n  },\r\n};\r\n\r\nexport type SupabaseDatabase = Database;\r\nexport type SupabaseClientType = SupabaseClient<Database>;\r\n\r\nlet adminClient: SupabaseClientType | null = null;\r\n\r\nexport function getSupabaseAdminClient(): SupabaseClientType {\r\n  if (!adminClient) {\r\n    adminClient = createClient<Database>(supabaseUrl, supabaseServiceRoleKey, globalOptions);\r\n  }\r\n  return adminClient;\r\n}\r\n\r\nexport function createSupabaseServerClient(accessToken?: string): SupabaseClientType {\r\n  return createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n    ...globalOptions,\r\n    global: {\r\n      headers: accessToken\r\n        ? {\r\n            Authorization: `Bearer ${accessToken}`,\r\n          }\r\n        : undefined,\r\n    },\r\n  });\r\n}\r\n\r\nexport function createSupabaseEdgeClient(accessToken?: string): SupabaseClientType {\r\n  return createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n    ...globalOptions,\r\n    global: {\r\n      headers: {\r\n        ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),\r\n        'x-client-info': 'edge',\r\n      },\r\n    },\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;AAEA,MAAM,cAAc,4HAAA,CAAA,MAAG,CAAC,YAAY;AACpC,MAAM,kBAAkB,4HAAA,CAAA,MAAG,CAAC,iBAAiB;AAC7C,MAAM,yBAAyB,4HAAA,CAAA,MAAG,CAAC,yBAAyB;AAE5D,MAAM,gBAAgB;IACpB,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;IACpB;AACF;AAKA,IAAI,cAAyC;AAEtC,SAAS;IACd,IAAI,CAAC,aAAa;QAChB,cAAc,CAAA,GAAA,iQAAA,CAAA,eAAY,AAAD,EAAY,aAAa,wBAAwB;IAC5E;IACA,OAAO;AACT;AAEO,SAAS,2BAA2B,WAAoB;IAC7D,OAAO,CAAA,GAAA,iQAAA,CAAA,eAAY,AAAD,EAAY,aAAa,iBAAiB;QAC1D,GAAG,aAAa;QAChB,QAAQ;YACN,SAAS,cACL;gBACE,eAAe,CAAC,OAAO,EAAE,aAAa;YACxC,IACA;QACN;IACF;AACF;AAEO,SAAS,yBAAyB,WAAoB;IAC3D,OAAO,CAAA,GAAA,iQAAA,CAAA,eAAY,AAAD,EAAY,aAAa,iBAAiB;QAC1D,GAAG,aAAa;QAChB,QAAQ;YACN,SAAS;gBACP,GAAI,cAAc;oBAAE,eAAe,CAAC,OAAO,EAAE,aAAa;gBAAC,IAAI,CAAC,CAAC;gBACjE,iBAAiB;YACnB;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sebak/OneDrive/Pulpit/saas-starter-main/apps/web/lib/db/schema.ts"],"sourcesContent":["import type { Database } from '../../../../supabase/types';\r\n\r\nexport type User = Database['public']['Tables']['users']['Row'];\r\nexport type NewUser = Database['public']['Tables']['users']['Insert'];\r\nexport type UpdateUser = Database['public']['Tables']['users']['Update'];\r\n\r\nexport type Team = Database['public']['Tables']['teams']['Row'];\r\nexport type NewTeam = Database['public']['Tables']['teams']['Insert'];\r\nexport type UpdateTeam = Database['public']['Tables']['teams']['Update'];\r\n\r\nexport type TeamMember = Database['public']['Tables']['team_members']['Row'];\r\nexport type NewTeamMember = Database['public']['Tables']['team_members']['Insert'];\r\nexport type UpdateTeamMember = Database['public']['Tables']['team_members']['Update'];\r\n\r\nexport type ActivityLog = Database['public']['Tables']['activity_logs']['Row'];\r\nexport type NewActivityLog = Database['public']['Tables']['activity_logs']['Insert'];\r\n\r\nexport type Invitation = Database['public']['Tables']['invitations']['Row'];\r\nexport type NewInvitation = Database['public']['Tables']['invitations']['Insert'];\r\n\r\nexport type BillingCustomer = Database['public']['Tables']['billing_customers']['Row'];\r\nexport type Subscription = Database['public']['Tables']['subscriptions']['Row'];\r\n\r\nexport type TeamMembershipSummary = Database['public']['Views']['team_memberships_mv']['Row'];\r\nexport type TeamBillingSummary = Database['public']['Views']['team_billing_mv']['Row'];\r\n\r\nexport type TeamMemberWithUser = TeamMember & {\r\n  user: Pick<User, 'id' | 'name' | 'email'>;\r\n};\r\n\r\nexport type TeamDataWithMembers = Team & {\r\n  teamMembers: TeamMemberWithUser[];\r\n  billingSummary: TeamBillingSummary | null;\r\n};\r\n\r\nexport enum ActivityType {\r\n  SIGN_UP = 'SIGN_UP',\r\n  SIGN_IN = 'SIGN_IN',\r\n  SIGN_OUT = 'SIGN_OUT',\r\n  UPDATE_PASSWORD = 'UPDATE_PASSWORD',\r\n  DELETE_ACCOUNT = 'DELETE_ACCOUNT',\r\n  UPDATE_ACCOUNT = 'UPDATE_ACCOUNT',\r\n  CREATE_TEAM = 'CREATE_TEAM',\r\n  REMOVE_TEAM_MEMBER = 'REMOVE_TEAM_MEMBER',\r\n  INVITE_TEAM_MEMBER = 'INVITE_TEAM_MEMBER',\r\n  ACCEPT_INVITATION = 'ACCEPT_INVITATION',\r\n}\r\n"],"names":[],"mappings":";;;AAmCO,IAAA,AAAK,sCAAA;;;;;;;;;;;WAAA","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sebak/OneDrive/Pulpit/saas-starter-main/apps/web/lib/auth/better.ts"],"sourcesContent":["import { betterAuth, type InferAPI, APIError } from 'better-auth';\r\nimport { organization } from 'better-auth/plugins/organization';\r\nimport { Pool } from 'pg';\r\nimport { PostgresDialect } from 'kysely';\r\nimport { getSupabaseAdminClient } from '@/lib/db/client';\r\nimport {\r\n  ActivityType,\r\n  type NewTeam,\r\n  type NewTeamMember,\r\n  type NewUser,\r\n} from '@/lib/db/schema';\r\nimport { baseUrl as applicationBaseUrl, env } from '@/config/env';\r\n\r\nconst databaseUrl = env.POSTGRES_URL;\r\nconst authSecret = env.AUTH_SECRET;\r\nconst baseUrl = applicationBaseUrl ?? 'http://localhost:3000';\r\n\r\nif (!databaseUrl) {\r\n  throw new Error('POSTGRES_URL is not defined');\r\n}\r\n\r\nif (!authSecret) {\r\n  throw new Error('AUTH_SECRET is not defined');\r\n}\r\n\r\nconst pool = new Pool({\r\n  connectionString: databaseUrl,\r\n  ssl:\r\n    env.POSTGRES_SSL === 'false'\r\n      ? false\r\n      : { rejectUnauthorized: false },\r\n});\r\n\r\nconst supabase = getSupabaseAdminClient();\r\n\r\nconst authInstance = betterAuth({\r\n  baseURL: baseUrl,\r\n  secret: authSecret,\r\n  database: {\r\n    dialect: new PostgresDialect({ pool }),\r\n    type: 'postgres',\r\n    casing: 'snake',\r\n  },\r\n  emailAndPassword: {\r\n    enabled: true,\r\n  },\r\n  user: {\r\n    additionalFields: {\r\n      supabaseId: {\r\n        type: 'number',\r\n        required: false,\r\n        input: false,\r\n        returned: true,\r\n      },\r\n    },\r\n  },\r\n  integrations: [],\r\n  plugins: [\r\n    organization({\r\n      teams: {\r\n        enabled: true,\r\n        defaultTeam: {\r\n          enabled: true,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  databaseHooks: {\r\n    account: {\r\n      create: {\r\n        async after(account, ctx) {\r\n          if (account.providerId !== 'credential') {\r\n            return;\r\n          }\r\n\r\n          const requestBody =\r\n            (ctx?.context as unknown as { body?: Record<string, unknown> })?.\r\n              body ?? {};\r\n          const inviteId = requestBody?.inviteId\r\n            ? Number(requestBody.inviteId)\r\n            : undefined;\r\n\r\n          const userRecord = await ctx?.context.internalAdapter.findUserById(\r\n            account.userId,\r\n            ctx?.context\r\n          );\r\n\r\n          if (!userRecord) {\r\n            return;\r\n          }\r\n\r\n          const { data: existingUser } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('email', userRecord.email)\r\n            .maybeSingle();\r\n\r\n          if (existingUser) {\r\n            await ctx?.context.internalAdapter.updateUser(account.userId, {\r\n              supabaseId: existingUser.id,\r\n            });\r\n            return;\r\n          }\r\n\r\n          if (!account.password) {\r\n            return;\r\n          }\r\n\r\n          const newUser: NewUser = {\r\n            email: userRecord.email,\r\n            name: userRecord.name ?? null,\r\n            password_hash: account.password,\r\n            role: 'owner',\r\n          } as NewUser;\r\n\r\n          const { data: createdUser, error: createUserError } = await supabase\r\n            .from('users')\r\n            .insert(newUser)\r\n            .select('*')\r\n            .single();\r\n\r\n          if (createUserError || !createdUser) {\r\n            console.error('Failed to create Supabase user', createUserError);\r\n            throw new APIError('INTERNAL_SERVER_ERROR', {\r\n              message: 'Failed to create Supabase user',\r\n            });\r\n          }\r\n\r\n          if (typeof inviteId === 'number') {\r\n            await ctx?.context.internalAdapter.updateUser(account.userId, {\r\n              supabaseId: createdUser.id,\r\n            });\r\n            return;\r\n          }\r\n\r\n          const teamPayload: NewTeam = {\r\n            name: `${userRecord.email}'s Team`,\r\n          } as NewTeam;\r\n\r\n          const { data: createdTeam, error: createTeamError } = await supabase\r\n            .from('teams')\r\n            .insert(teamPayload)\r\n            .select('*')\r\n            .single();\r\n\r\n          if (createTeamError || !createdTeam) {\r\n            console.error('Failed to create default team', createTeamError);\r\n            return;\r\n          }\r\n\r\n          const memberPayload: NewTeamMember = {\r\n            team_id: createdTeam.id,\r\n            user_id: createdUser.id,\r\n            role: 'owner',\r\n          } as NewTeamMember;\r\n\r\n          const { error: memberError } = await supabase\r\n            .from('team_members')\r\n            .insert(memberPayload);\r\n\r\n          if (memberError) {\r\n            console.error('Failed to create team member', memberError);\r\n          }\r\n\r\n          await Promise.all([\r\n            supabase.from('activity_logs').insert({\r\n              team_id: createdTeam.id,\r\n              user_id: createdUser.id,\r\n              action: ActivityType.CREATE_TEAM,\r\n            }),\r\n            supabase.from('activity_logs').insert({\r\n              team_id: createdTeam.id,\r\n              user_id: createdUser.id,\r\n              action: ActivityType.SIGN_UP,\r\n            }),\r\n            supabase.rpc('refresh_team_views'),\r\n            ctx?.context.internalAdapter.updateUser(account.userId, {\r\n              supabaseId: createdUser.id,\r\n            }),\r\n          ]);\r\n        },\r\n      },\r\n    },\r\n    session: {\r\n      create: {\r\n        async after(session, ctx) {\r\n          const user = await ctx?.context.internalAdapter.findUserById(\r\n            session.userId,\r\n            ctx?.context\r\n          );\r\n\r\n          if (!user?.supabaseId) {\r\n            return;\r\n          }\r\n\r\n          const { data: membership } = await supabase\r\n            .from('team_members')\r\n            .select('team_id')\r\n            .eq('user_id', user.supabaseId)\r\n            .maybeSingle();\r\n\r\n          if (!membership?.team_id) {\r\n            return;\r\n          }\r\n\r\n          await supabase.from('activity_logs').insert({\r\n            team_id: membership.team_id,\r\n            user_id: user.supabaseId,\r\n            action: ActivityType.SIGN_IN,\r\n          });\r\n        },\r\n      },\r\n      delete: {\r\n        async after(session, ctx) {\r\n          const user = await ctx?.context.internalAdapter.findUserById(\r\n            session.userId,\r\n            ctx?.context\r\n          );\r\n\r\n          if (!user?.supabaseId) {\r\n            return;\r\n          }\r\n\r\n          const { data: membership } = await supabase\r\n            .from('team_members')\r\n            .select('team_id')\r\n            .eq('user_id', user.supabaseId)\r\n            .maybeSingle();\r\n\r\n          if (!membership?.team_id) {\r\n            return;\r\n          }\r\n\r\n          await supabase.from('activity_logs').insert({\r\n            team_id: membership.team_id,\r\n            user_id: user.supabaseId,\r\n            action: ActivityType.SIGN_OUT,\r\n          });\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport const auth = authInstance;\r\nexport type AuthAPI = InferAPI<typeof auth>;\r\n\r\nexport async function validateSession(headersInit: HeadersInit) {\r\n  const result = await auth.api.getSession({\r\n    headers: headersInit,\r\n    returnHeaders: true,\r\n  });\r\n\r\n  return result;\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sebak/OneDrive/Pulpit/saas-starter-main/apps/web/src/i18n/config.ts"],"sourcesContent":["export const locales = ['en', 'pl'] as const;\r\nexport type Locale = (typeof locales)[number];\r\nexport const defaultLocale: Locale = 'en';\r\n\r\nconst dictionaries: Record<Locale, () => Promise<Record<string, unknown>>> = {\r\n  en: () => import('../locales/en/common.json').then((module) => module.default),\r\n  pl: () => import('../locales/pl/common.json').then((module) => module.default),\r\n};\r\n\r\nexport async function getMessages(locale: string) {\r\n  const normalizedLocale = locales.includes(locale as Locale)\r\n    ? (locale as Locale)\r\n    : defaultLocale;\r\n\r\n  try {\r\n    return await dictionaries[normalizedLocale]();\r\n  } catch (error) {\r\n    console.warn(\r\n      `Falling back to default locale due to missing messages for \"${locale}\"`,\r\n      error\r\n    );\r\n    return dictionaries[defaultLocale]();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAAO,MAAM,UAAU;IAAC;IAAM;CAAK;AAE5B,MAAM,gBAAwB;AAErC,MAAM,eAAuE;IAC3E,IAAI,IAAM,uHAAoC,IAAI,CAAC,CAAC,SAAW,OAAO,OAAO;IAC7E,IAAI,IAAM,uHAAoC,IAAI,CAAC,CAAC,SAAW,OAAO,OAAO;AAC/E;AAEO,eAAe,YAAY,MAAc;IAC9C,MAAM,mBAAmB,QAAQ,QAAQ,CAAC,UACrC,SACD;IAEJ,IAAI;QACF,OAAO,MAAM,YAAY,CAAC,iBAAiB;IAC7C,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CACV,CAAC,4DAA4D,EAAE,OAAO,CAAC,CAAC,EACxE;QAEF,OAAO,YAAY,CAAC,cAAc;IACpC;AACF","debugId":null}},
    {"offset": {"line": 483, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sebak/OneDrive/Pulpit/saas-starter-main/apps/web/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport createIntlMiddleware from 'next-intl/middleware';\r\nimport { auth } from '@/lib/auth/better';\r\nimport { defaultLocale, locales, type Locale } from '@/src/i18n/config';\r\n\r\nconst protectedRoutes = ['/dashboard'];\r\n\r\n// Simple in-memory rate limiting store\r\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\r\n\r\nfunction rateLimit(identifier: string, limit: number, windowMs: number): boolean {\r\n  const now = Date.now();\r\n  const key = identifier;\r\n  \r\n  // Clean up expired entries\r\n  for (const [k, v] of rateLimitStore.entries()) {\r\n    if (v.resetTime < now) {\r\n      rateLimitStore.delete(k);\r\n    }\r\n  }\r\n  \r\n  const record = rateLimitStore.get(key);\r\n  \r\n  if (!record || record.resetTime < now) {\r\n    rateLimitStore.set(key, {\r\n      count: 1,\r\n      resetTime: now + windowMs,\r\n    });\r\n    return true;\r\n  }\r\n  \r\n  if (record.count >= limit) {\r\n    return false;\r\n  }\r\n  \r\n  record.count++;\r\n  return true;\r\n}\r\n\r\nconst intlMiddleware = createIntlMiddleware({\r\n  locales: [...locales],\r\n  defaultLocale,\r\n  localePrefix: 'always',\r\n});\r\n\r\nfunction extractPathWithoutLocale(pathname: string) {\r\n  const segments = pathname.split('/').filter(Boolean);\r\n  if (segments.length === 0) {\r\n    return '/';\r\n  }\r\n\r\n  segments.shift();\r\n  return `/${segments.join('/')}`;\r\n}\r\n\r\nfunction resolveLocaleFromPath(pathname: string): Locale {\r\n  const segment = pathname.split('/').filter(Boolean)[0];\r\n  if (segment && locales.includes(segment as Locale)) {\r\n    return segment as Locale;\r\n  }\r\n\r\n  return defaultLocale;\r\n}\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const pathname = request.nextUrl.pathname;\r\n  const clientId = request.ip || request.headers.get('x-forwarded-for') || 'unknown';\r\n  \r\n  // Apply rate limiting for API routes\r\n  if (pathname.startsWith('/api/')) {\r\n    const isAuthRoute = pathname.includes('/auth') || pathname.includes('/sign-in') || pathname.includes('/sign-up');\r\n    const limit = isAuthRoute ? 20 : 100; // 20 req/min for auth, 100 req/min for other API\r\n    const windowMs = 60 * 1000; // 1 minute\r\n    \r\n    if (!rateLimit(clientId, limit, windowMs)) {\r\n      return NextResponse.json(\r\n        { error: 'Too many requests' },\r\n        { status: 429, headers: { 'Retry-After': '60' } }\r\n      );\r\n    }\r\n  }\r\n\r\n  const intlResponse = intlMiddleware(request);\r\n\r\n  if (intlResponse.headers.has('location')) {\r\n    return intlResponse;\r\n  }\r\n\r\n  const locale = resolveLocaleFromPath(pathname);\r\n  const normalizedPath = extractPathWithoutLocale(pathname);\r\n  const isProtectedRoute = protectedRoutes.some((route) =>\r\n    normalizedPath.startsWith(route)\r\n  );\r\n\r\n  let sessionHeaders: Headers | null = null;\r\n  let sessionPayload: unknown = null;\r\n\r\n  try {\r\n    const sessionResult = (await auth.api.getSession({\r\n      headers: request.headers,\r\n      returnHeaders: true,\r\n    })) as unknown as { headers?: Headers; response?: unknown };\r\n\r\n    sessionHeaders = sessionResult?.headers ?? null;\r\n    sessionPayload = sessionResult?.response ?? sessionResult ?? null;\r\n  } catch (error) {\r\n    console.error('Failed to validate session via Better Auth', error);\r\n  }\r\n\r\n  const hasSession = Boolean((sessionPayload as any)?.session);\r\n\r\n  if (isProtectedRoute && !hasSession) {\r\n    const redirectUrl = new URL(`/${locale}/sign-in`, request.url);\r\n    const redirectResponse = NextResponse.redirect(redirectUrl);\r\n\r\n    const setCookieHeader = sessionHeaders?.get('set-cookie');\r\n    if (setCookieHeader) {\r\n      redirectResponse.headers.set('set-cookie', setCookieHeader);\r\n    }\r\n\r\n    return redirectResponse;\r\n  }\r\n\r\n  const response = intlResponse ?? NextResponse.next();\r\n  const setCookieHeader = sessionHeaders?.get('set-cookie');\r\n  if (setCookieHeader) {\r\n    response.headers.set('set-cookie', setCookieHeader);\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    '/((?!api|_next/static|_next/image|favicon.ico|site.webmanifest|robots.txt).*)',\r\n  ],\r\n  runtime: 'nodejs',\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}}]
}